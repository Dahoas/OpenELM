{"src": "import numpy as np\n\n\n\nclass Policy:\n\n    def __init__(self):\n\n        self.memory = {'key_picked_up': False, 'door_opened': False, 'door_opening': False, 'door_unlocked': False, \n\n                       'box_picked_up': False}  # Persistent memory/state\n\n        \n\n        self.steps = 0\n\n        \n\n        self.actions = [0, 1, 2, 3, 4, 5]  # Possible actions\n\n        self.explore_count = 0  # Count for exploration actions\n\n        \n\n        self.explored_tiles = set()  # To keep track of tiles explored\n\n        \n\n    def act(self, observation):\n\n        direction = observation['agent']['direction']\n\n        image = observation['agent']['image']\n\n        inv = observation['inv']\n\n        \n\n        current_tile = image[3][6]  # Current tile agent is standing on\n\n        forward_tile = image[3][5]  # Tile agent is facing\n\n        \n\n        if forward_tile[0] == 5 and 3 not in inv:\n\n            return 3  # Pickup key\n\n        \n\n        if forward_tile[0] == 4 and forward_tile[2] == 2 and 5 in inv and not self.memory['door_opening']:\n\n            return 5  # Toggle key to open door\n\n        \n\n        if forward_tile[0] == 7 and 0 in inv:\n\n            return 3  # Pickup box if available\n\n        \n\n        if forward_tile[0] not in [2, 9] and tuple(forward_tile) not in self.explored_tiles:\n\n            self.explored_tiles.add(tuple(forward_tile))  # Add the tile to explored set\n\n            return 2  # Move forward if facing an unexplored tile\n\n        \n\n        # Exploration strategy\n\n        self.explore_count += 1\n\n        \n\n        if self.explore_count % 3 == 0:\n\n            return np.random.choice([0, 1])  # Randomly turn left or right every 3rd step\n\n        \n\n        if self.explore_count % 2 == 0:\n\n            return 2  # Move forward every 2nd step\n\n        \n\n        return 2  # Move forward by default\n\n        \n\n    def update(self, observation, action, reward, next_observation):\n\n        key_picked_up = self.memory['key_picked_up']\n\n        door_opened = self.memory['door_opened']\n\n        door_unlocked = self.memory['door_unlocked']\n\n        door_opening = self.memory['door_opening']\n\n        box_picked_up = self.memory['box_picked_up']\n\n        \n\n        self.steps += 1\n\n        \n\n        if not key_picked_up and reward == 0.1:\n\n            self.memory['key_picked_up'] = True\n\n        if not door_unlocked and reward == 0.3:\n\n            self.memory['door_unlocked'] = True\n\n        if not door_opening and reward == 0.2:\n\n            self.memory['door_opening'] = True\n\n        if not door_opened and reward == 0.1:\n\n            self.memory['door_opened'] = True\n\n        if not box_picked_up and reward == 0.9:\n\n            self.memory['box_picked_up'] = True"}