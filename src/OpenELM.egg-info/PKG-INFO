Metadata-Version: 2.1
Name: OpenELM
Version: 0.1.dev153+gbeb6642
Summary: Evolution Through Large Models
Author: CarperAI
License: MIT
Classifier: Development Status :: 3 - Alpha
Classifier: Environment :: Console
Classifier: Intended Audience :: Science/Research
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Typing :: Typed
Classifier: Operating System :: Unix
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aiohttp==3.9.1
Requires-Dist: aiosignal==1.3.1
Requires-Dist: antlr4-python3-runtime==4.9.3
Requires-Dist: anyio==4.2.0
Requires-Dist: appdirs==1.4.4
Requires-Dist: async-timeout==4.0.3
Requires-Dist: attrs==23.2.0
Requires-Dist: blinker==1.7.0
Requires-Dist: build==1.0.3
Requires-Dist: CacheControl==0.13.1
Requires-Dist: cachetools==5.3.2
Requires-Dist: certifi==2023.11.17
Requires-Dist: cffi==1.16.0
Requires-Dist: charset-normalizer==3.3.2
Requires-Dist: cleo==2.1.0
Requires-Dist: click==8.1.7
Requires-Dist: cloudpickle==3.0.0
Requires-Dist: contourpy==1.2.0
Requires-Dist: crashtest==0.4.1
Requires-Dist: cryptography==41.0.7
Requires-Dist: cycler==0.12.1
Requires-Dist: dataclasses-json==0.5.14
Requires-Dist: distlib==0.3.8
Requires-Dist: distro==1.9.0
Requires-Dist: docker-pycreds==0.4.0
Requires-Dist: dulwich==0.21.7
Requires-Dist: exceptiongroup==1.2.0
Requires-Dist: Farama-Notifications==0.0.4
Requires-Dist: fastjsonschema==2.19.1
Requires-Dist: filelock
Requires-Dist: Flask==3.0.0
Requires-Dist: fonttools==4.47.0
Requires-Dist: frozenlist==1.4.1
Requires-Dist: fsspec==2023.12.2
Requires-Dist: gitdb==4.0.11
Requires-Dist: GitPython==3.1.40
Requires-Dist: google-ai-generativelanguage==0.4.0
Requires-Dist: google-api-core==2.15.0
Requires-Dist: google-auth==2.27.0
Requires-Dist: google-cloud-aiplatform==1.40.0
Requires-Dist: google-cloud-bigquery==3.17.1
Requires-Dist: google-cloud-core==2.4.1
Requires-Dist: google-cloud-resource-manager==1.11.0
Requires-Dist: google-cloud-storage==2.14.0
Requires-Dist: google-crc32c==1.5.0
Requires-Dist: google-generativeai==0.3.2
Requires-Dist: google-resumable-media==2.7.0
Requires-Dist: googleapis-common-protos==1.62.0
Requires-Dist: greenlet==3.0.3
Requires-Dist: grpc-google-iam-v1==0.13.0
Requires-Dist: grpcio==1.60.0
Requires-Dist: grpcio-status==1.60.0
Requires-Dist: gymnasium==0.29.1
Requires-Dist: h11==0.14.0
Requires-Dist: httpcore==1.0.2
Requires-Dist: httpx==0.26.0
Requires-Dist: hydra-core==1.3.2
Requires-Dist: idna==3.6
Requires-Dist: importlib-metadata==7.0.1
Requires-Dist: importlib-resources==6.1.1
Requires-Dist: installer==0.7.0
Requires-Dist: itsdangerous==2.1.2
Requires-Dist: jaraco.classes==3.3.0
Requires-Dist: jeepney==0.8.0
Requires-Dist: Jinja2==3.1.2
Requires-Dist: joblib==1.3.2
Requires-Dist: jsonpatch==1.33
Requires-Dist: jsonpointer==2.4
Requires-Dist: keyring==24.3.0
Requires-Dist: kiwisolver==1.4.5
Requires-Dist: langchain==0.1.2
Requires-Dist: langchain-community==0.0.14
Requires-Dist: langchain-core==0.1.14
Requires-Dist: langchainplus-sdk==0.0.20
Requires-Dist: langsmith==0.0.83
Requires-Dist: litellm==1.19.2
Requires-Dist: MarkupSafe==2.1.3
Requires-Dist: marshmallow==3.20.1
Requires-Dist: matplotlib==3.8.2
Requires-Dist: minigrid==2.3.1
Requires-Dist: more-itertools==10.1.0
Requires-Dist: mpmath==1.3.0
Requires-Dist: msgpack==1.0.7
Requires-Dist: multidict==6.0.4
Requires-Dist: mypy-extensions==1.0.0
Requires-Dist: networkx==3.0
Requires-Dist: numexpr==2.8.8
Requires-Dist: numpy==1.26.3
Requires-Dist: omegaconf==2.3.0
Requires-Dist: openai==1.5.0
Requires-Dist: openapi-schema-pydantic==1.2.4
Requires-Dist: packaging==23.2
Requires-Dist: pexpect==4.9.0
Requires-Dist: pillow==10.2.0
Requires-Dist: pkginfo==1.9.6
Requires-Dist: platformdirs==3.11.0
Requires-Dist: plotly==5.18.0
Requires-Dist: poetry==1.7.1
Requires-Dist: poetry-core==1.8.1
Requires-Dist: poetry-plugin-export==1.6.0
Requires-Dist: poetry2setup==1.1.0
Requires-Dist: proto-plus==1.23.0
Requires-Dist: protobuf==4.25.1
Requires-Dist: psutil==5.9.7
Requires-Dist: ptyprocess==0.7.0
Requires-Dist: pyasn1==0.5.1
Requires-Dist: pyasn1-modules==0.3.0
Requires-Dist: pycparser==2.21
Requires-Dist: pydantic==1.10.13
Requires-Dist: pygame==2.5.2
Requires-Dist: pyparsing==3.1.1
Requires-Dist: pyproject_hooks==1.0.0
Requires-Dist: python-dateutil==2.8.2
Requires-Dist: python-dotenv==1.0.1
Requires-Dist: PyYAML==6.0.1
Requires-Dist: rapidfuzz==3.6.1
Requires-Dist: regex==2023.12.25
Requires-Dist: requests==2.31.0
Requires-Dist: requests-toolbelt==1.0.0
Requires-Dist: rsa==4.9
Requires-Dist: safetensors==0.4.1
Requires-Dist: scikit-learn==1.3.2
Requires-Dist: scipy==1.11.4
Requires-Dist: SecretStorage==3.3.3
Requires-Dist: sentry-sdk==1.39.1
Requires-Dist: setproctitle==1.3.3
Requires-Dist: shapely==2.0.2
Requires-Dist: shellingham==1.5.4
Requires-Dist: six==1.16.0
Requires-Dist: smmap==5.0.1
Requires-Dist: sniffio==1.3.0
Requires-Dist: SQLAlchemy==2.0.24
Requires-Dist: sympy==1.12
Requires-Dist: tenacity==8.2.3
Requires-Dist: threadpoolctl==3.2.0
Requires-Dist: tiktoken==0.5.2
Requires-Dist: tomli==2.0.1
Requires-Dist: tomlkit==0.12.3
Requires-Dist: tqdm==4.66.1
Requires-Dist: trove-classifiers==2023.11.29
Requires-Dist: typing-inspect==0.9.0
Requires-Dist: typing_extensions
Requires-Dist: urllib3<2.0
Requires-Dist: wandb==0.16.1
Requires-Dist: Werkzeug==3.0.1
Requires-Dist: yarl==1.9.4
Requires-Dist: zipp==3.17.0
Requires-Dist: chess
Requires-Dist: transformers==4.36.2
Requires-Dist: stockfish
Provides-Extra: dev
Requires-Dist: black; extra == "dev"
Requires-Dist: isort; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Requires-Dist: flake8-pyproject; extra == "dev"
Requires-Dist: pydocstyle; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Requires-Dist: pre-commit; extra == "dev"
Requires-Dist: pytest; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Provides-Extra: benchmarks
Requires-Dist: pygraphviz; extra == "benchmarks"
Requires-Dist: graphviz; extra == "benchmarks"
Requires-Dist: openai; extra == "benchmarks"
Provides-Extra: docs
Requires-Dist: sphinx==5.3.0; extra == "docs"
Requires-Dist: sphinx_rtd_theme; extra == "docs"
Requires-Dist: sphinx_autodoc_typehints; extra == "docs"
Provides-Extra: triton
Requires-Dist: tritonclient[all]; extra == "triton"
Provides-Extra: notebook
Requires-Dist: ipython; extra == "notebook"
Provides-Extra: sodaracer
Requires-Dist: swig>=4.1.0; extra == "sodaracer"
Requires-Dist: box2d-py==2.3.8; extra == "sodaracer"
Requires-Dist: pygame; extra == "sodaracer"

[![DOI](https://zenodo.org/badge/532259603.svg)](https://zenodo.org/badge/latestdoi/532259603)
# OpenELM

OpenELM is an open-source library by CarperAI, designed to enable evolutionary search with language models in both code and natural language.

The OpenELM project has the following goals:
1. Release an open-source version of ELM with its associated diff models.
2. Integrate with both open-source language models (run locally or on Colab) and with closed models via paid APIs, such as the OpenAI API.
We want to support users with many different compute profiles!
3. Provide a simple interface to a range of example environments for evolutionary search, to let users adapt these easily for their domain.
4. Demonstrate the potential of evolution with LLMs.

**<ins>For QDAIF</ins>:** poetry domain currently implemented in main, and other experiment code with few-shot [LMX](https://arxiv.org/abs/2302.12170) domains currently in [experimental branch](https://github.com/CarperAI/OpenELM/tree/qdaif-lmx-expt)

# Install
`pip install openelm`

To use the sodarace environment, you must first `pip install swig`.

Then:

`pip install openelm[sodaracer]`

See the pyproject.toml for further install options.

# Features

### LLM integration with evolutionary algorithms
OpenELM supports the quality-diversity algorithms MAP-Elites, CVT-MAP-Elites, and Deep Grid MAP-Elites, as well as a simple genetic algorithm baseline.

### Evolutionary operators
OpenELM supports:
1. Prompt-based mutation with instruct models
2. Diff models (specialised for code)
3. Crossover with language models

### LLM support, efficiency, and safety
OpenELMâ€™s language models are instantiated as Langchain classes by default, which means that OpenELM can support practically any existing LLM API, as well as models run on your local GPU via HuggingFace Transformers.

We also provide optional Nvidia Triton Inference Server support, intended for use cases where low latency on 8 or more GPUs is important. Finally, for code generation domains, we provide a sandbox environment, consisting of a container server backed with gVisor (a container runtime that introduces an additional barrier between the host and the container) as well as a heuristic-based safety guard.

### Baseline environments
1. **Sodarace.** A 2D physics-based simulation of robots moving across a variety of terrains. These robots are created by Python programs generated from an LLM.
2. **Image Generation.** OpenELM can evolve over generated images by generating code that returns NumPy arrays containing the images. This serves as a simple test environment for code generation
3. **Programming Puzzles.** OpenELM can be used to generate diverse solutions to programming puzzles. This environment supports co-evolution of both the problem and the solution at the same time.
4. **Prompts.** OpenELM contains a generic environment suitable for evolving prompts for language models, customizable with Langchain templates to the desired domain.
5. We also include a **poetry** environment, demonstrating the use of LLMs to evaluate both the quality and diversity of generated creative writing text, as described in a recent CarperAI blog post on Quality-Diversity with AI Feedback (QDAIF).

## Architecture
Roughly, ELM consists of a pipeline of different components:
1. The `Environment` class. This class defines the mechanics of how to initialize members of the population, mutate them with the desired operator, and how to measure the fitness (and diversity) of individuals.
2. The `MAPElites` class. This class describes how the evolutionary algorithm works, and can be viewed as a wrapper around the environment defining the selection algorithm for generated individuals.
3. The `MutationModel` class, which is responsible for running the LLM to actually generate new individuals. This functions as a wrapper around the LangChain API. The environment is expected to call the `MutationModel` when a new individual is needed.
4. The `ELM` class calls the `MAPElites` algorithm class and runs the search.

All options for these classes are defined in `configs.py`, via dataclasses which are registered as a `hydra` config, and can be overriden via the command line when running one of the example scripts such as `run_elm.py`.

## Running ELM
`python run_elm.py` will start an ELM evolutionary search using the defaults listed in `configs.py`. These can be overriden via the command line. For example, you can use `run_elm.py env=image_evolution` to run the Image Evolution environment.

## Sandbox
To use the code execution sandbox, see the [sandboxing readme](https://github.com/CarperAI/OpenELM/blob/main/src/openelm/sandbox/README.md) for instructions to set it up in a Docker container with the gVisor runtime.

## Triton
We also have code available to run models in Nvidia's Triton Inference Server. See the [Triton Readme](https://github.com/CarperAI/OpenELM/blob/main/src/openelm/codegen/triton_utils/readme.md) to get started

# Contributing
If you'd like to contribute or have questions, go to the #openelm channel on the [CarperAI discord](https://discord.gg/canadagoose)!
